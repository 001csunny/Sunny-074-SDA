name: Complex CI/CD Workflow

# ระบุ Event ที่จะ Trigger Workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# กำหนด Jobs หลายส่วนใน Workflow
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Cache Python Dependencies
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 3: Set Up Python Environment
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 4: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Run Unit Tests
      - name: Run Unit Tests
        run: |
          pytest --junitxml=junit/test-results.xml --cov=.

      # Step 6: Upload Test Results as Artifact
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: junit/test-results.xml

      # Step 7: Generate Coverage Report
      - name: Generate Coverage Report
        run: |
          coverage xml
          coverage html

      # Step 8: Upload Coverage Report
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  deploy:
    name: Deploy to Production
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Authenticate with GCP
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Step 3: Set GCP Project
      - name: Set GCP Project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      # Step 4: Deploy Application to Google Cloud
      - name: Deploy Application
        run: |
          gcloud app deploy app.yaml --quiet
